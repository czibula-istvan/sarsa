package ro.sarsa.som;

import java.util.ArrayList;
import java.util.List;

import ro.sarsa.clustering.IDistance;
import ro.sarsa.clustering.distances.EuclideanDistance;
import ro.sarsa.som.topology.SOMTopology;
import ro.sarsa.som.traindata.SOMTrainData;
import ro.sarsa.som.trainsamplechooser.SOMTrainInputChooser;

public class SOM {

    /**
     * Discriminant function Folosit pentru a determina cel mai apropiat neuron
     * pentru 0 intrare
     */
    private IDistance<double[]> dist;
    // private IDistance<double[]> dist = new ManhattanDistance();
    private SOMTopology comptationL;

    public SOM(int inputSpaceDimension, SOMTopology topo) {
        this(inputSpaceDimension, topo, new EuclideanDistance());
    }

    public SOM(int inputSpaceDimension, SOMTopology topo, IDistance<double[]> dist) {
        comptationL = topo;
        this.dist = dist;
    }

    public SOMTopology getTopo() {
        return comptationL;
    }

    public BMU computeBestMatchingUnit(double[] input) {
        double minDist = Double.MAX_VALUE;// distanta minima
        SOMNeuron bmuN = null;// neuronul castigator
        int nrNeurons = comptationL.getNrNeurons();
        for (int i = 0; i < nrNeurons; i++) {
            SOMNeuron neuron = comptationL.getNeuron(i);
            double d = dist.distance(input, neuron.getWeights());
            if (d < minDist) {
                minDist = d;
                bmuN = neuron;
            }
        }
        return new BMU(bmuN, minDist, input);
    }

    public void train2Phase(int nrIteration, SOMTrainData trData,
            double startLearnigRate, double startNeighborRadius,
            SOMTrainingListener l) {
        train2Phase(nrIteration, trData, startLearnigRate, startNeighborRadius,
                l, new RandomSOMReainInputChooser(trData.size()));
    }

    public void train2Phase(int nrIteration, SOMTrainData trData,
            double startLearnigRate, double startNeighborRadius,
            SOMTrainingListener l, SOMTrainInputChooser inputChosser) {
        train(nrIteration, trData, startLearnigRate, startNeighborRadius, l,
                inputChosser);
        train(nrIteration / 2, trData, startLearnigRate / 10, 0, l,
                inputChosser);
    }

    public void train(int nrIteration, SOMTrainData trData,
            double startLearnigRate, SOMTrainingListener l) {
        double maxNeighborRadius = comptationL.getMaxRadius() / 2d;
        train(nrIteration, trData, startLearnigRate, maxNeighborRadius, l);
    }

    public void train(int nrIteration, SOMTrainData trData,
            double startLearnigRate, double startNeighborRadius,
            SOMTrainingListener l) {
        train(nrIteration, trData, startLearnigRate, startNeighborRadius, l,
                new RandomSOMReainInputChooser(trData.size()));
    }

    public void train(int nrIteration, SOMTrainData trData,
            double startLearnigRate, double startNeighborRadius,
            SOMTrainingListener l, SOMTrainInputChooser inpuChooser) {
        double lambdaTimeConstant = nrIteration / Math.log(startNeighborRadius);

        for (int iteration = 0; iteration < nrIteration; iteration++) {
            // calculez learningRate
            double learningRate = startLearnigRate
                    * Math.exp(-(double) iteration / nrIteration);
            double neighborRadius = startNeighborRadius
                    * Math.exp(-(double) iteration / lambdaTimeConstant);

            // aleg input
            int[] inputIndexes = inpuChooser.getNextInputIndex();
            for (int i = 0; i < inputIndexes.length; i++) {
                int inputIndex = inputIndexes[i];
                trainingStep(iteration, trData.get(inputIndex), learningRate,
                        neighborRadius, l);
            }
        }
    }

    /**
     * O iteratie din training
     */
    public void trainingStep(int curIter, double input[], double learningRate,
            double neighborRadius, SOMTrainingListener l) {
        // caut Best maching unit
        BMU bmu = computeBestMatchingUnit(input);
        // actualizez weights de la bmu
        bmu.getNeuron().adjustWeights(input, learningRate, 1);
        // obtin lista vecinilor ce pica in radiusul cerut
        List<NeighborSOMNeuron> neighbors = comptationL.getNeighbors(bmu.getNeuron(), neighborRadius);
        // System.out.println("lr:" + learningRate + " nR:" + neighborRadius);

        // actualizez valorile in functie de cat de apropiat e de BMU
        if (neighbors != null && neighbors.size() > 0) {
            updateNeighbors(input, learningRate, neighborRadius, neighbors);
        }
        if (l != null) {
            l.trainStepPerformed(curIter, input, bmu, neighbors);
        }
    }

    private void updateNeighbors(double[] input, double learningRate,
            double neighborRadius, List<NeighborSOMNeuron> neighbors) {
        final double aux = 2 * neighborRadius * neighborRadius;
        for (int i = 0; i < neighbors.size(); i++) {
            NeighborSOMNeuron neighborSOMNeuron = neighbors.get(i);
            double influence = Math.exp(-(neighborSOMNeuron.getDistance() * neighborSOMNeuron.getDistance())
                    / aux);
            neighborSOMNeuron.getNeuron().adjustWeights(input, learningRate,
                    influence);
        }
    }

    /**
     * Calculeaza eroarea... e vorba de media dintre |x-mx| pentru fiecare
     * input... unde x e un imput iar mx e bmu pentru acel input
     *
     * @param td
     * @return
     */
    public double computeAverageQuantizationError(SOMTrainData td) {
        double rez = 0;
        for (int i = 0; i < td.size(); i++) {
            double[] input = td.get(i);
            BMU bmu = computeBestMatchingUnit(input);
            rez += dist.distance(input, bmu.getNeuron().getWeights());
        }
        return rez / td.size();
    }

    public List<BMU> getBMUS(SOMTrainData trD) {
        List<BMU> bmus = new ArrayList<BMU>(trD.size());
        for (int i = 0; i < trD.size(); i++) {
            bmus.add(computeBestMatchingUnit(trD.get(i)));
        }
        return bmus;
    }

    /**
     * Eroare ce ia in calcul si veciinii suma(Hci*|x-mi]^2);
     *
     * @param td
     * @return
     */
    public double computeAverageDistorsionError(SOMTrainData td) {
        return -1;
    }
}
