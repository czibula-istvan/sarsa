package ro.sarsa.som.umatrix;

import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Shape;
import java.util.List;

import javax.swing.JPanel;
import javax.swing.SwingUtilities;

import ro.sarsa.som.BMU;
import ro.sarsa.som.NeighborSOMNeuron;
import ro.sarsa.som.SOM;
import ro.sarsa.som.SOMNeuron;
import ro.sarsa.som.SOMTrainingListener;
import ro.sarsa.som.testapps.SomDrawDataBMUs;
import ro.sarsa.som.testapps.TrainIterationSnapshoot;
import ro.sarsa.som.topology.SOMTopology;
import ro.sarsa.som.traindata.SOMTrainData;

/**
 * Vizualizeaza UMatrix
 *
 * @author istvan
 *
 */
public class UMatrixPanel extends JPanel implements SOMTrainingListener {
	private SOMTopology topo;
	private SOM som;
	private SOMTrainData trD;
	private SOMUMatrix uMatr;
	private ColorGradient cg;

	public UMatrixPanel(SOM som, SOMTrainData trD) {
		this.som = som;
		this.topo = som.getTopo();
		this.trD = trD;
		uMatr = new SOMUMatrix(topo);

		cg = new ColorGradient();
//		cg.addPoint(Color.yellow);
//		cg.addPoint(Color.red);

		 cg.addPoint(Color.black);
		 cg.addPoint(Color.white);

		// cg.addPoint(Color.red);
		// cg.addPoint(Color.yellow);
		// cg.addPoint(Color.blue);
		cg.createGradient(100);
	}

	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		Graphics2D g2d = (Graphics2D) g;
		int w = getWidth() - 10;
		int h = getHeight() - 10;
		List<UMatrixValue> umvs = uMatr.getNormalizedUMatrix();
		for (int i = 0; i < umvs.size(); i++) {
			UMatrixValue umv = umvs.get(i);
			SOMNeuron n = umv.getNeuron();
			Color color = getColor(umv);
			g.setColor(color);
			Shape s = topo.getNeuronShape(w, h, n);
			g2d.fill(s);
			g2d.setColor(Color.black);
			g2d.draw(s);
		}
		SomDrawDataBMUs.drawData(g, w, h, som, trD);
	}

	private Color getColor(UMatrixValue umv) {
		float c = (float) umv.getValue();
		// Color color = new Color(c, c, c);
		// return color;
		return cg.getColour((int) (c * 99));
	}

	@Override
	public void trainStepPerformed(int iteration, double[] input, BMU bmu,
			List<NeighborSOMNeuron> neighbors) {
		try {
			SwingUtilities.invokeAndWait(new Runnable() {
				@Override
				public void run() {
					paintImmediately(0, 0, getWidth(), getHeight());
				}

			});
			// Thread.sleep(500);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
